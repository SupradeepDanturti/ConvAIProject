# Generated 2024-04-01 from:
# D:\Winter 24\COMP 691 X- Conversational AI\Project\ConvAIProject\xvector\hparams_xvector_fbanks_fft.yaml
# yamllint disable
# Your code here

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1986
__set_seed: !!python/object/apply:torch.manual_seed [1986]

output_folder: ../results/XVector/UnAugmented/fft/1986
save_folder: ../results/XVector/UnAugmented/fft/1986/save
train_log: ../results/XVector/UnAugmented/fft/1986/train_log.txt

# Path where data manifest files are stored
data_dir: ../data
train_annotation: ../data/train_data.json
valid_annotation: ../data/valid_data.json
test_annotation: ../data/test_data.json

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: ../results/XVector/UnAugmented/fft/1986/train_log.txt

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
  metric: !name:speechbrain.nnet.losses.classification_error
    reduction: batch

# Feature parameters
n_mels: 40
n_fft: 400
time_resolution: 0.01
# deltas: True

# Training Parameters
sample_rate: 16000
number_of_epochs: 50
batch_size: 512
lr_start: 0.001
lr_final: 0.0001

weight_decay: 0.00002
# lr_patience: 1
n_classes: 5
emb_dim: 512 # dimensionality of the embeddings

dataloader_options:
  batch_size: 512

# Feature extraction
compute_features: &id001 !new:speechbrain.lobes.features.Fbank
  sample_rate: 16000
  n_fft: 400
  n_mels: 40
  hop_length: 10.0                            # in ms

# Mean and std normalization of the input features
mean_var_norm: &id002 !new:speechbrain.processing.features.InputNormalization
  norm_type: sentence
  std_norm: false

# Embedding model: from variable size digits gets a fixed size embedding vector
embedding_model: &id003 !new:speechbrain.lobes.models.Xvector.Xvector
  in_channels: 40
  activation: !name:torch.nn.LeakyReLU
  tdnn_blocks: 5
  tdnn_channels: [256, 256, 256, 256, 1024]
  tdnn_kernel_sizes: [5, 3, 3, 1, 1]
  tdnn_dilations: [1, 2, 3, 1, 1]
  lin_neurons: 512

# Clasifier applied on top of the embeddings
classifier: &id004 !new:speechbrain.lobes.models.Xvector.Classifier

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
# 
# opt_class: !name:torch.optim.Adadelta
#     lr: !ref <lr>
#     rho: 0.95
#     eps: 1.e-8

# opt_class: !name:torch.optim.AdamW
#     lr: 0.001
#     weight_decay: 0.02

  input_shape: [null, null, 512]
  activation: !name:torch.nn.LeakyReLU
  lin_blocks: 1
  lin_neurons: 512
  out_neurons: 5

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: &id005 !new:speechbrain.utils.epoch_loop.EpochCounter
  limit: 50

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
  compute_features: *id001
  mean_var_norm: *id002
  embedding_model: *id003
  classifier: *id004
opt_class: !name:torch.optim.AdamW
  lr: 0.001
  weight_decay: 0.00002

# This function manages learning rate annealing over the epochs.
# We here use the simple lr annealing method that linearly decreases
# the lr from the initial value to the final one.

# lr_annealing: !new:speechbrain.nnet.schedulers.CyclicLRScheduler
#     mode: triangular2
#     gamma: 0.9998
#     base_lr: 0.001 #best for adam
#     max_lr: 0.004 #hope that it escapes local minima
#     step_size: 9935 #317920/64 = 4967.5 *2-8 == 9935-39740


lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
  initial_value: 0.001
  final_value: 0.0001
  epoch_count: 50

# 
# lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
#     initial_value: !ref <lr>
#     improvement_threshold: 0.0025
#     annealing_factor: 0.8
#     patient: 0

# lr_scheduler: !new:speechbrain.nnet.schedulers.ReduceLROnPlateau
#     lr_min: !ref <lr_final>
#     dont_halve_until_epoch: !ref <lr_dont_halve_until_epoch>
#     patience: !ref <lr_patience>

# lr_annealing_model_3: !new:speechbrain.nnet.schedulers.CyclicCosineScheduler
#   lr_initial: !ref <peak_lr>
#   n_warmup_steps: !ref <warmup_steps>
#   total_steps: !ref <total_step>



# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: ../results/XVector/UnAugmented/fft/1986/save
  recoverables:
    embedding_model: *id003
    classifier: *id004
    normalizer: *id002
    counter: *id005
