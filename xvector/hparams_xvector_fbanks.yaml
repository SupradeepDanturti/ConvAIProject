
# Seed for reproducibility of results. Must be set before initializing 
# model components that depend on randomness.
seed: 1986
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]

# Specify paths for storing and accessing data.
output_folder: !ref ../results/XVector/Augmented/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Paths for saving outputs and logs from the model training process.
data_folder: ../data
train_annotation: !ref <data_folder>/train_data.json
valid_annotation: !ref <data_folder>/valid_data.json
test_annotation: !ref <data_folder>/test_data.json

# Annotations for additional noise and room impulse responses (RIRs).
noise_annotation: !ref <data_folder>/noises.csv
rir_annotation: !ref <data_folder>/simulated_rirs.csv

# Logger configuration for recording training progress and statistics.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

# Metric statistics configuration for evaluating model performance.
error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

# Checkpoint configuration: enables periodic saving of model state.
ckpt_enable: True
ckpt_interval_minutes: 15 # Interval in minutes for saving checkpoints.

####################### Training Parameters ####################################
# Model and training hyperparameters.
n_mels: 40
sample_rate: 16000
number_of_epochs: 50
batch_size: 64
lr_start: 0.001
lr_final: 0.0001
weight_decay: 0.00002
tdnn_channels: 64
tdnn_channels_out: 128
n_classes: 5 
emb_dim: 128 

# DataLoader configuration to specify how training data is batched and handled during training.
num_workers: 0 # Number of workers for data loading. Use 2 for Linux, 0 for Windows compatibility.
dataloader_options:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>
        
###################### Feature and Model Configuration ##################################

# Feature extraction using Mel-frequency cepstral coefficients.
compute_features: !new:speechbrain.lobes.features.Fbank
    n_mels: !ref <n_mels>

# Normalization of input features by mean and variance.
mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False

# X-vector model configuration for embedding extraction.
embedding_model: !new:speechbrain.lobes.models.Xvector.Xvector
    in_channels: !ref <n_mels>
    activation: !name:torch.nn.LeakyReLU
    tdnn_blocks: 5
    tdnn_channels:
        - !ref <tdnn_channels>
        - !ref <tdnn_channels>
        - !ref <tdnn_channels>
        - !ref <tdnn_channels>
        - !ref <tdnn_channels_out>
    tdnn_kernel_sizes: [5, 3, 3, 1, 1]
    tdnn_dilations: [1, 2, 3, 1, 1]
    lin_neurons: !ref <emb_dim>
        
# Classifier model configuration.
classifier: !new:speechbrain.lobes.models.Xvector.Classifier
    input_shape: [null, null, !ref <emb_dim>]
    activation: !name:torch.nn.LeakyReLU
    lin_blocks: 1
    lin_neurons: !ref <emb_dim>
    out_neurons: !ref <n_classes>
        
# Epoch counter for tracking the number of training iterations.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Organizes modules for parameter optimization.
modules:
    compute_features: !ref <compute_features>
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    mean_var_norm: !ref <mean_var_norm>

# Optimizer configuration for model training.
opt_class: !name:torch.optim.Adam
    lr: !ref <lr_start>
    weight_decay: !ref <weight_decay>

# Learning rate scheduler for adjusting the learning rate during training.
lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
    initial_value: !ref <lr_start>
    final_value: !ref <lr_final>
    epoch_count: !ref <number_of_epochs>
        
# Checkpointer for managing the saving and loading of model states.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        embedding_model: !ref <embedding_model>
        classifier: !ref <classifier>
        normalizer: !ref <mean_var_norm>
        counter: !ref <epoch_counter>
